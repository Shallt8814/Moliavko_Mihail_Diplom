{"name": "test_txt_company", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached: received Inspector.detached event\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=131.0.6778.108)\nStacktrace:\n#0 0x611fb16b831a <unknown>\n#1 0x611fb11ce6e0 <unknown>\n#2 0x611fb11b814c <unknown>\n#3 0x611fb11b702e <unknown>\n#4 0x611fb11b67af <unknown>\n#5 0x611fb11b66a2 <unknown>\n#6 0x611fb11b46c6 <unknown>\n#7 0x611fb11b4eaf <unknown>\n#8 0x611fb11c4747 <unknown>\n#9 0x611fb11db564 <unknown>\n#10 0x611fb11e13eb <unknown>\n#11 0x611fb11b55b7 <unknown>\n#12 0x611fb11db0c1 <unknown>\n#13 0x611fb1260256 <unknown>\n#14 0x611fb1241203 <unknown>\n#15 0x611fb120fcc0 <unknown>\n#16 0x611fb1210c9e <unknown>\n#17 0x611fb1685d0b <unknown>\n#18 0x611fb1689c92 <unknown>\n#19 0x611fb1672b3c <unknown>\n#20 0x611fb168a807 <unknown>\n#21 0x611fb16580df <unknown>\n#22 0x611fb16a7578 <unknown>\n#23 0x611fb16a7740 <unknown>\n#24 0x611fb16b7196 <unknown>\n#25 0x78a55209ca94 <unknown>\n#26 0x78a552129c3c <unknown>", "trace": "web_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"813e632e7a9675070797194cf4bdf24c\")>\n\n>   ???\n\n/home/mike/PycharmProjects/Moliavko_Mihail_Diplom/moliavko_m/diplom/tests/test_IKEA_foundation_about_page.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlocators/locators_IKEA_foundation_about_page.py:15: in __init__\n    super().__init__(web_driver, url)\npage/base_page.py:15: in __init__\n    self.get(url)\npage/base_page.py:33: in get\n    self._web_driver.get(url)\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x70ca9e892c80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached: received Inspect...\\\\n#24 0x611fb16b7196 \\\\u003Cunknown>\\\\n#25 0x78a55209ca94 \\\\u003Cunknown>\\\\n#26 0x78a552129c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached: received Inspector.detached event\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=131.0.6778.108)\nE       Stacktrace:\nE       #0 0x611fb16b831a <unknown>\nE       #1 0x611fb11ce6e0 <unknown>\nE       #2 0x611fb11b814c <unknown>\nE       #3 0x611fb11b702e <unknown>\nE       #4 0x611fb11b67af <unknown>\nE       #5 0x611fb11b66a2 <unknown>\nE       #6 0x611fb11b46c6 <unknown>\nE       #7 0x611fb11b4eaf <unknown>\nE       #8 0x611fb11c4747 <unknown>\nE       #9 0x611fb11db564 <unknown>\nE       #10 0x611fb11e13eb <unknown>\nE       #11 0x611fb11b55b7 <unknown>\nE       #12 0x611fb11db0c1 <unknown>\nE       #13 0x611fb1260256 <unknown>\nE       #14 0x611fb1241203 <unknown>\nE       #15 0x611fb120fcc0 <unknown>\nE       #16 0x611fb1210c9e <unknown>\nE       #17 0x611fb1685d0b <unknown>\nE       #18 0x611fb1689c92 <unknown>\nE       #19 0x611fb1672b3c <unknown>\nE       #20 0x611fb168a807 <unknown>\nE       #21 0x611fb16580df <unknown>\nE       #22 0x611fb16a7578 <unknown>\nE       #23 0x611fb16a7740 <unknown>\nE       #24 0x611fb16b7196 <unknown>\nE       #25 0x78a55209ca94 <unknown>\nE       #26 0x78a552129c3c <unknown>\n\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException"}, "start": 1734547339730, "stop": 1734547342171, "uuid": "3759ca97-bd92-4ed6-a67a-bd53a57545f6", "historyId": "4c566e1478b59f59687d5a931935a5a9", "testCaseId": "4c566e1478b59f59687d5a931935a5a9", "fullName": "tests_ui.test_IKEA_foundation_about_page#test_txt_company", "labels": [{"name": "story", "value": "Проверка страницы о Ikea Foundation"}, {"name": "feature", "value": "Тест для проверки текста о компании и титульного фото"}, {"name": "parentSuite", "value": "tests_ui"}, {"name": "suite", "value": "test_IKEA_foundation_about_page"}, {"name": "host", "value": "mike-IdeaPad-Gaming-3-15ARH7"}, {"name": "thread", "value": "28190-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_ui.test_IKEA_foundation_about_page"}]}