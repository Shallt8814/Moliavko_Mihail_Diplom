{"name": "test_main_activities_text", "status": "failed", "statusDetails": {"message": "AssertionError: FAILURE: check Mensen == People\ntest_main_page.py:179 in test_main_activities_text() -> check.equal(elements.get_text(), elements_text)\n\nFAILURE: check We zetten ons in om gezinnen die in armoede leven en mensen die hun huis hebben moeten ontvluchten te helpen een duurzaam bestaan op te bouwen. We zien grote kansen in regeneratieve landbouw, groen ondernemen en het productieve gebruik van hernieuwbare energie. == We’re committed to helping families living in poverty and people who have been forced to flee their homes to build sustainable livelihoods. We see great opportunities in regenerative agriculture, green enterprise and the productive use of renewable energy.\nFAILURE: check Planeet == Planet\nFAILURE: check We zetten ons in voor gedurfde klimaatmaatregelen om de uitstoot van broeikasgassen drastisch te verminderen en om kwetsbare gemeenschappen te helpen zich aan te passen aan de gevolgen van klimaatverandering. == We are committed to taking bold climate action. Our mission is clear: drastically reduce greenhouse gas emissions to mitigate global temperature rise to 1.5°C and support vulnerable communities in adapting to the inevitable impacts of climate change. In the foreseeable future, our top priority is emission reduction, as we believe it is the most urgent step toward securing a sustainable future for all.\n------------------------------------------------------------\nFailed Checks: 4\n------------------------------------------------------------\nweb_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"814635cf7edb61aeb9afcd05281d66e1\")>\n\n    @allure.story('Тест для проверки главной страницы')\n    @allure.feature('Проверка Our focus, Our grants, Our learnings')\n    def test_main_activities_text(web_browser):\n        page = MainPage(web_browser)\n        page.btn_pip_up_сookies.click()\n        element_text = [\n            (page.txt_our_focus_people,\"People\"),\n            (page.txt_our_focus_people_text,\"We’re committed to helping families living in poverty and people who have been forced to flee their homes to build sustainable livelihoods. We see great opportunities in regenerative agriculture, green enterprise and the productive use of renewable energy.\"),\n            (page.txt_our_focus_planet,\"Planet\"),\n            (page.txt_our_focus_planet_text,\"We are committed to taking bold climate action. Our mission is clear: drastically reduce greenhouse gas emissions to mitigate global temperature rise to 1.5°C and support vulnerable communities in adapting to the inevitable impacts of climate change. In the foreseeable future, our top priority is emission reduction, as we believe it is the most urgent step toward securing a sustainable future for all.\"),\n        ]\n        element = web_browser.find_element(By.XPATH,'//div[@class=\"entry__inner padded container has-parent-\"]')\n        web_browser.execute_script(\"arguments[0].scrollIntoView(true);\", element)\n        time.sleep(2)\n        for elements, elements_text in element_text:\n            with allure.step(\"проверка видимости\"):\n                check.is_true(elements.is_visible())\n            with allure.step(\"проверка текста\"):\n                check.equal(elements.get_text(), elements_text)\n        elementos_textos = [\n            (page.txt_our_grands_text,\"Find out about the partners we fund and the amount, duration and scope of our grants.\")\n        ]\n>       element = web_browser.find_element(By.XPATH,'//div[@id=\"tns2-iw\"]')\n\ntests/test_main_page.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x784e54389a50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x5c9ecd378196 \\\\u003Cunknown>\\\\n#18 0x7cb9dfc9ca94 \\\\u003Cunknown>\\\\n#19 0x7cb9dfd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id=\"tns2-iw\"]\"}\nE         (Session info: chrome=131.0.6778.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x5c9ecd37931a <unknown>\nE       #1 0x5c9ecce8f6e0 <unknown>\nE       #2 0x5c9eccede3e6 <unknown>\nE       #3 0x5c9eccede681 <unknown>\nE       #4 0x5c9eccf23b04 <unknown>\nE       #5 0x5c9eccf0248d <unknown>\nE       #6 0x5c9eccf20ed7 <unknown>\nE       #7 0x5c9eccf02203 <unknown>\nE       #8 0x5c9ecced0cc0 <unknown>\nE       #9 0x5c9ecced1c9e <unknown>\nE       #10 0x5c9ecd346d0b <unknown>\nE       #11 0x5c9ecd34ac92 <unknown>\nE       #12 0x5c9ecd333b3c <unknown>\nE       #13 0x5c9ecd34b807 <unknown>\nE       #14 0x5c9ecd3190df <unknown>\nE       #15 0x5c9ecd368578 <unknown>\nE       #16 0x5c9ecd368740 <unknown>\nE       #17 0x5c9ecd378196 <unknown>\nE       #18 0x7cb9dfc9ca94 <unknown>\nE       #19 0x7cb9dfd29c3c <unknown>\n\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException", "trace": "FAILURE: check Mensen == People\ntest_main_page.py:179 in test_main_activities_text() -> check.equal(elements.get_text(), elements_text)\n\nFAILURE: check We zetten ons in om gezinnen die in armoede leven en mensen die hun huis hebben moeten ontvluchten te helpen een duurzaam bestaan op te bouwen. We zien grote kansen in regeneratieve landbouw, groen ondernemen en het productieve gebruik van hernieuwbare energie. == We’re committed to helping families living in poverty and people who have been forced to flee their homes to build sustainable livelihoods. We see great opportunities in regenerative agriculture, green enterprise and the productive use of renewable energy.\nFAILURE: check Planeet == Planet\nFAILURE: check We zetten ons in voor gedurfde klimaatmaatregelen om de uitstoot van broeikasgassen drastisch te verminderen en om kwetsbare gemeenschappen te helpen zich aan te passen aan de gevolgen van klimaatverandering. == We are committed to taking bold climate action. Our mission is clear: drastically reduce greenhouse gas emissions to mitigate global temperature rise to 1.5°C and support vulnerable communities in adapting to the inevitable impacts of climate change. In the foreseeable future, our top priority is emission reduction, as we believe it is the most urgent step toward securing a sustainable future for all.\n------------------------------------------------------------\nFailed Checks: 4\n------------------------------------------------------------\nweb_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"814635cf7edb61aeb9afcd05281d66e1\")>\n\n    @allure.story('Тест для проверки главной страницы')\n    @allure.feature('Проверка Our focus, Our grants, Our learnings')\n    def test_main_activities_text(web_browser):\n        page = MainPage(web_browser)\n        page.btn_pip_up_сookies.click()\n        element_text = [\n            (page.txt_our_focus_people,\"People\"),\n            (page.txt_our_focus_people_text,\"We’re committed to helping families living in poverty and people who have been forced to flee their homes to build sustainable livelihoods. We see great opportunities in regenerative agriculture, green enterprise and the productive use of renewable energy.\"),\n            (page.txt_our_focus_planet,\"Planet\"),\n            (page.txt_our_focus_planet_text,\"We are committed to taking bold climate action. Our mission is clear: drastically reduce greenhouse gas emissions to mitigate global temperature rise to 1.5°C and support vulnerable communities in adapting to the inevitable impacts of climate change. In the foreseeable future, our top priority is emission reduction, as we believe it is the most urgent step toward securing a sustainable future for all.\"),\n        ]\n        element = web_browser.find_element(By.XPATH,'//div[@class=\"entry__inner padded container has-parent-\"]')\n        web_browser.execute_script(\"arguments[0].scrollIntoView(true);\", element)\n        time.sleep(2)\n        for elements, elements_text in element_text:\n            with allure.step(\"проверка видимости\"):\n                check.is_true(elements.is_visible())\n            with allure.step(\"проверка текста\"):\n                check.equal(elements.get_text(), elements_text)\n        elementos_textos = [\n            (page.txt_our_grands_text,\"Find out about the partners we fund and the amount, duration and scope of our grants.\")\n        ]\n>       element = web_browser.find_element(By.XPATH,'//div[@id=\"tns2-iw\"]')\n\ntests/test_main_page.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x784e54389a50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#17 0x5c9ecd378196 \\\\u003Cunknown>\\\\n#18 0x7cb9dfc9ca94 \\\\u003Cunknown>\\\\n#19 0x7cb9dfd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id=\"tns2-iw\"]\"}\nE         (Session info: chrome=131.0.6778.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x5c9ecd37931a <unknown>\nE       #1 0x5c9ecce8f6e0 <unknown>\nE       #2 0x5c9eccede3e6 <unknown>\nE       #3 0x5c9eccede681 <unknown>\nE       #4 0x5c9eccf23b04 <unknown>\nE       #5 0x5c9eccf0248d <unknown>\nE       #6 0x5c9eccf20ed7 <unknown>\nE       #7 0x5c9eccf02203 <unknown>\nE       #8 0x5c9ecced0cc0 <unknown>\nE       #9 0x5c9ecced1c9e <unknown>\nE       #10 0x5c9ecd346d0b <unknown>\nE       #11 0x5c9ecd34ac92 <unknown>\nE       #12 0x5c9ecd333b3c <unknown>\nE       #13 0x5c9ecd34b807 <unknown>\nE       #14 0x5c9ecd3190df <unknown>\nE       #15 0x5c9ecd368578 <unknown>\nE       #16 0x5c9ecd368740 <unknown>\nE       #17 0x5c9ecd378196 <unknown>\nE       #18 0x7cb9dfc9ca94 <unknown>\nE       #19 0x7cb9dfd29c3c <unknown>\n\n/home/mike/.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchElementException"}, "steps": [{"name": "проверка видимости", "status": "passed", "start": 1734544878808, "stop": 1734544878839}, {"name": "проверка текста", "status": "passed", "start": 1734544878839, "stop": 1734544878872}, {"name": "проверка видимости", "status": "passed", "start": 1734544878872, "stop": 1734544878899}, {"name": "проверка текста", "status": "passed", "start": 1734544878899, "stop": 1734544878922}, {"name": "проверка видимости", "status": "passed", "start": 1734544878922, "stop": 1734544878947}, {"name": "проверка текста", "status": "passed", "start": 1734544878947, "stop": 1734544878965}, {"name": "проверка видимости", "status": "passed", "start": 1734544878965, "stop": 1734544878987}, {"name": "проверка текста", "status": "passed", "start": 1734544878987, "stop": 1734544879007}], "start": 1734544862358, "stop": 1734544879035, "uuid": "414666d6-c5d7-4807-bdde-720e53078077", "historyId": "346c9bd95e35b2af7bb8350f74ed01ae", "testCaseId": "346c9bd95e35b2af7bb8350f74ed01ae", "fullName": "tests.test_main_page#test_main_activities_text", "labels": [{"name": "story", "value": "Тест для проверки главной страницы"}, {"name": "feature", "value": "Проверка Our focus, Our grants, Our learnings"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page"}, {"name": "host", "value": "mike-IdeaPad-Gaming-3-15ARH7"}, {"name": "thread", "value": "17409-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page"}]}